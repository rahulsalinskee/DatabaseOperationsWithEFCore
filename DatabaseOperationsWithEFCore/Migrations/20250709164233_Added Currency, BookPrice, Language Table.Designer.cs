// <auto-generated />
using System;
using DatabaseOperationsWithEFCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseOperationsWithEFCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250709164233_Added Currency, BookPrice, Language Table")]
    partial class AddedCurrencyBookPriceLanguageTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatabaseOperationsWithEFCore.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("DatabaseOperationsWithEFCore.Models.BookPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("BookPrices");
                });

            modelBuilder.Entity("DatabaseOperationsWithEFCore.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "United States Dollar",
                            Title = "USD"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Euro",
                            Title = "EUR"
                        },
                        new
                        {
                            Id = 3,
                            Description = "British Pound Sterling",
                            Title = "GBP"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Indian Rupee",
                            Title = "INR"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Japanese Yen",
                            Title = "JPY"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Chinese Yuan",
                            Title = "CNY"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Australian Dollar",
                            Title = "AUD"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Canadian Dollar",
                            Title = "CAD"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Swiss Franc",
                            Title = "CHF"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Russian Ruble",
                            Title = "RUB"
                        });
                });

            modelBuilder.Entity("DatabaseOperationsWithEFCore.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("DatabaseOperationsWithEFCore.Models.Book", b =>
                {
                    b.HasOne("DatabaseOperationsWithEFCore.Models.Language", "Language")
                        .WithMany("Books")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("DatabaseOperationsWithEFCore.Models.BookPrice", b =>
                {
                    b.HasOne("DatabaseOperationsWithEFCore.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseOperationsWithEFCore.Models.Currency", "Currency")
                        .WithMany("BookPrices")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("DatabaseOperationsWithEFCore.Models.Currency", b =>
                {
                    b.Navigation("BookPrices");
                });

            modelBuilder.Entity("DatabaseOperationsWithEFCore.Models.Language", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
